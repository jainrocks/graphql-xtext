/*
 * generated by Xtext 2.28.0
 */
package com.intuit.graphql.scoping;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.SimpleScope;

import com.intuit.graphql.graphQL.ArgumentsDefinition;
import com.intuit.graphql.graphQL.Directive;
import com.intuit.graphql.graphQL.DirectiveDefinition;
import com.intuit.graphql.graphQL.DirectiveLocation;
import com.intuit.graphql.graphQL.GraphQLFactory;
import com.intuit.graphql.graphQL.GraphQLPackage;
import com.intuit.graphql.graphQL.InputValueDefinition;
import com.intuit.graphql.graphQL.PrimitiveType;
import com.intuit.graphql.graphQL.TypeSystem;
import com.intuit.graphql.graphQL.TypeSystemDefinition;
import com.intuit.graphql.graphQL.Value;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class GraphQLScopeProvider extends AbstractGraphQLScopeProvider {

	private Map<String, Function<String, DirectiveDefinition>> BUILT_IN_DIRECTIVE_DEFINITIONS = new HashMap() {
		{
			put("include", createFilterableDirective);
			put("skip", createFilterableDirective);
			put("deprecated", createDeprecatedDirective);
			put("specifiedBy", createSpecifiedByDirective);

		}
	};

	private static Function<String, DirectiveDefinition> createDeprecatedDirective = directiveName -> {

		PrimitiveType primitive = GraphQLFactory.eINSTANCE.createPrimitiveType();
		primitive.setType("String");

		Value value = GraphQLFactory.eINSTANCE.createValue();
		value.setStringValue("No longer supported");

		InputValueDefinition input = GraphQLFactory.eINSTANCE.createInputValueDefinition();
		input.setName("reason");
		input.setNamedType(primitive);
		input.setDefaultValue(value);

		ArgumentsDefinition arguments = GraphQLFactory.eINSTANCE.createArgumentsDefinition();
		arguments.getInputValueDefinition().add(input);

		DirectiveDefinition deprecated = GraphQLFactory.eINSTANCE.createDirectiveDefinition();
		deprecated.setName("deprecated");
		deprecated.setArgumentsDefinition(arguments);
		deprecated.getDirectiveLocations().addAll(
				Arrays.asList(createDirectiveLocation("FIELD_DEFINITION"), createDirectiveLocation("ENUM_VALUE")));

		return deprecated;
	};

	private static DirectiveLocation createDirectiveLocation(String location) {
		DirectiveLocation directiveLocation = GraphQLFactory.eINSTANCE.createDirectiveLocation();
		directiveLocation.setNamedDirective(location);
		return directiveLocation;
	}

	private static Function<String, DirectiveDefinition> createFilterableDirective = directiveName -> {

		PrimitiveType primitive = GraphQLFactory.eINSTANCE.createPrimitiveType();
		primitive.setType("Boolean");
		primitive.setNonNull(true);

		InputValueDefinition input = GraphQLFactory.eINSTANCE.createInputValueDefinition();
		input.setName("if");
		input.setNamedType(primitive);

		ArgumentsDefinition arguments = GraphQLFactory.eINSTANCE.createArgumentsDefinition();
		arguments.getInputValueDefinition().add(input);

		DirectiveDefinition directive = GraphQLFactory.eINSTANCE.createDirectiveDefinition();
		directive.setName(directiveName);
		directive.setArgumentsDefinition(arguments);
		directive.getDirectiveLocations().addAll(Arrays.asList(createDirectiveLocation("FIELD"),
				createDirectiveLocation("FRAGMENT_SPREAD"), createDirectiveLocation("INLINE_FRAGMENT")));

		return directive;
	};
	
	/**
     * The "specifiedBy" directive allows to provide a specification URL for a Scalar
     */
	private static Function<String, DirectiveDefinition> createSpecifiedByDirective = directiveName -> {

		PrimitiveType primitive = GraphQLFactory.eINSTANCE.createPrimitiveType();
		primitive.setType("String");
		primitive.setNonNull(true);

		InputValueDefinition input = GraphQLFactory.eINSTANCE.createInputValueDefinition();
		input.setName("url");
		input.setDesc("The URL that specifies the behaviour of this scalar.");
		input.setNamedType(primitive);

		ArgumentsDefinition arguments = GraphQLFactory.eINSTANCE.createArgumentsDefinition();
		arguments.getInputValueDefinition().add(input);

		DirectiveDefinition directive = GraphQLFactory.eINSTANCE.createDirectiveDefinition();
		directive.setName(directiveName);
		directive.setDesc("Exposes a URL that specifies the behaviour of this scalar.");
		directive.setArgumentsDefinition(arguments);
		directive.getDirectiveLocations().addAll(Arrays.asList(createDirectiveLocation("SCALAR")));

		return directive;
	};

	private TypeSystemDefinition typeSystemDefinition(DirectiveDefinition directiveDefinition) {
		TypeSystemDefinition typeSystemDefinition = GraphQLFactory.eINSTANCE.createTypeSystemDefinition();
		typeSystemDefinition.setDirective(directiveDefinition);
		return typeSystemDefinition;
	}

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if (context instanceof Directive && reference == GraphQLPackage.Literals.DIRECTIVE__DEFINITION) {
			EObject rootContainer = EcoreUtil2.getRootContainer(context);
			if (rootContainer instanceof TypeSystem) {
				TypeSystem typeSystem = (TypeSystem) rootContainer;
				Map<String, DirectiveDefinition> existingDirectives = EcoreUtil2
						.getAllContentsOfType(rootContainer, DirectiveDefinition.class).stream()
						.collect(Collectors.toMap(d -> d.getName(), Function.identity(), (v1, v2 ) -> v1));

				BUILT_IN_DIRECTIVE_DEFINITIONS.forEach((key, value) -> {
					if (!existingDirectives.containsKey(key)) {
						DirectiveDefinition def = value.apply(key);
						existingDirectives.put(key, def);
						context.eResource().getContents().add(def);
						typeSystem.getTypeSystemDefinition().add(typeSystemDefinition(def));

					}
				});
				return new SimpleScope(this.delegateGetScope(context, reference),
						Scopes.scopedElementsFor(existingDirectives.values()));
			}
		}
		return super.getScope(context, reference);
	}

}